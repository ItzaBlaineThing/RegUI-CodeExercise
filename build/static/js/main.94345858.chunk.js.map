{"version":3,"sources":["components/forms/registration/progressBar/ProgressBar.js","components/forms/registration/views/RegViewOne.js","components/forms/registration/views/RegViewTwo.js","components/forms/registration/views/RegViewThree.js","components/forms/registration/RegistrationForm.js","components/App.js","index.js"],"names":["ProgressBar","props","className","circleOne","textOne","circleTwo","textTwo","circleThree","textThree","RegViewOne","currentView","Form","Group","Label","Control","type","placeholder","name","onChange","handleChange","value","form","firstName","lastName","email","isComplete","viewOne","Button","variant","onClick","changeView","disabled","RegViewTwo","address","phoneNumber","npiNumber","Container","Row","Col","viewTwo","RegViewThree","useState","isChecked","setIsChecked","Text","Check","label","RegistrationForm","setForm","setIsComplete","contentChecker","itemOne","itemTwo","itemThree","view","length","prevValue","event","target","setCurrentView","viewSelected","id","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94345858.chunk.js","sourcesContent":["// Import React\r\nimport React from 'react';\r\n\r\n// ProgressBar Component\r\nexport default function ProgressBar(props) {\r\n\r\n    return (    \r\n        // Div for the ProgressBar\r\n        <div className=\"progress-div\">\r\n            {/* Div for one of the individual circles that make up the ProgressBar, 1/3 */}\r\n            <div className=\"progress-one-div\">\r\n                {/* Uses a div with a CSS class to create the base circle */}\r\n                {/* The class that determines the color of the cirlce is passed in dynamically as a prop */}\r\n                <div className={`progress-circle ${props.circleOne}`}></div>\r\n                {/* Text to show which step they're on, this doesn't change */}\r\n                {/* The class that determines the color and font weight is passed in dynamically as a prop */}\r\n                <h5 className={`progress-div-text ${props.textOne}`}>User Information</h5>\r\n            </div>\r\n            {/* Div for one of the individual circles that make up the ProgressBar, 2/3 */}\r\n            <div className=\"progress-two-div\">\r\n                {/* Uses a div with a CSS class to create the base circle */}\r\n                {/* The class that determines the color of the cirlce is passed in dynamically as a prop */}\r\n                <div className={`progress-circle progress-circle-middle ${props.circleTwo}`}></div>\r\n                {/* Uses an 'hr' element to create the line that spans the progress bar */}\r\n                <hr />\r\n                {/* Text to show which step they're on, this doesn't change */}\r\n                {/* The class that determines the color and font weight is passed in dynamically as a prop */}\r\n                <h5 className={`progress-div-text ${props.textTwo}`}>Organization Information</h5>\r\n            </div>\r\n            {/* Div for one of the individual circles that make up the ProgressBar, 3/3 */}\r\n            <div className=\"progress-three-div\">\r\n                {/* Uses a div with a CSS class to create the base circle */}\r\n                {/* The class that determines the color of the cirlce is passed in dynamically as a prop */}\r\n                <div className={`progress-circle ${props.circleThree}`}></div>\r\n                {/* Text to show which step they're on, this doesn't change */}\r\n                {/* The class that determines the color and font weight is passed in dynamically as a prop */}\r\n                <h5 className={`progress-div-text ${props.textThree}`}>Review Information</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// Import React\r\nimport React from 'react';\r\n\r\n// Import React-Bootstrap\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// Import Custom Components\r\nimport ProgressBar from '../progressBar/ProgressBar';\r\n\r\n// RegViewOne Component\r\nexport default function RegViewOne(props) {\r\n\r\n    // Conditional Rendering Logic, if currentView doesn't equal 1, return null, else return the first view\r\n    if (props.currentView !== 1) {\r\n        return null\r\n    } else {\r\n        return (\r\n            // RegViewOne\r\n            <div>\r\n                {/* Title */}\r\n                <h1 className=\"registration-form-title\">Let's get started!</h1>\r\n                {/* Subtitle */}\r\n                <h5 className=\"registration-form-subtitle\">Tell us a little about youself</h5>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>First Name</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"text\" className=\"registration-form-input\" placeholder=\"First Name\" name=\"firstName\" onChange={props.handleChange} value={props.form.firstName}/>\r\n                </Form.Group>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"text\" className=\"registration-form-input\" placeholder=\"Last Name\" name=\"lastName\" onChange={props.handleChange} value={props.form.lastName} />\r\n                </Form.Group>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>Email</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"email\" className=\"registration-form-input\" placeholder=\"Email\" name=\"email\" onChange={props.handleChange} value={props.form.email} />\r\n                </Form.Group>\r\n\r\n                {/* Div for the 'Continue' button */}\r\n                <div className=\"registration-form-btn-div\">\r\n                    {/* Conditional Rendering Logic, if the isComplete state prop is true, display the button that will let them continue, else display the disabled button */}\r\n                    {props.isComplete.viewOne ?\r\n                        <Button variant=\"registration-form-btn\" onClick={() => {props.changeView(2)}}>\r\n                            Continue\r\n                        </Button>\r\n                    :\r\n                        <Button variant=\"registration-form-btn registration-form-btn-disabled\" disabled>\r\n                            Continue\r\n                        </Button>\r\n                    }\r\n                </div>\r\n                {/* The ProgressBar component, allows us to pass in props to control the different classes applied */}\r\n                {/* Using a ProgressBar component while passing in the classes as props allows us to reuse the same code while changing the parts that we need to  */}\r\n                <ProgressBar circleOne={\"current\"} circleTwo={\"\"} circleThree={\"\"} textOne={\"active\"} textTwo={\"disabled\"} textThree={\"disabled\"}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","// Import React\r\nimport React from 'react';\r\n\r\n// Import React-Bootstrap\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// Import Custom Components\r\nimport ProgressBar from '../progressBar/ProgressBar';\r\n\r\n// RegViewTwo Component\r\nexport default function RegViewTwo(props) {\r\n\r\n    // Conditional Rendering Logic, if currentView doesn't equal 2, return null, else return the second view\r\n    if (props.currentView !== 2) {\r\n        return null\r\n    } else {\r\n        return (\r\n            // RegViewTwo\r\n            <div>\r\n                {/* Title */}\r\n                <h1 className=\"registration-form-title\">Organization Info</h1>\r\n                {/* Subtitle */}\r\n                <h5 className=\"registration-form-subtitle\">Tell us about your organization</h5>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>Business Address</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"text\" className=\"registration-form-input\" placeholder=\"Business Address\" name=\"address\" onChange={props.handleChange} value={props.form.address}/>\r\n                </Form.Group>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>Phone Number</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"text\" className=\"registration-form-input\" placeholder=\"Phone Number\" name=\"phoneNumber\" onChange={props.handleChange} value={props.form.phoneNumber} />\r\n                </Form.Group>\r\n\r\n                {/* Form Group */}\r\n                <Form.Group className=\"registration-form-group\">\r\n                    {/* Form Label */}\r\n                    <Form.Label>NPI Number</Form.Label>\r\n                    {/* Form Control Field */}\r\n                    {/* On form change we call the 'handleChange' function to update the state of this form.[key], we then set the value of the field to form.[key] to update in real time */}\r\n                    <Form.Control type=\"text\" className=\"registration-form-input\" placeholder=\"NPI Number\" name=\"npiNumber\" onChange={props.handleChange} value={props.form.npiNumber} />\r\n                </Form.Group>\r\n\r\n                {/* Div for the 'Continue' and 'Back' buttons */}\r\n                <div className=\"registration-form-btn-div\">\r\n                    {/* Use a Container, Rows, and Columns to layout the buttons */}\r\n                    <Container className=\"registration-form-btn-container\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Button variant=\"registration-form-btn-alt\" type=\"button\" onClick={() => {props.changeView(1)}}>\r\n                                    Back\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                            {/* Conditional Rendering Logic, if the isComplete state prop is true, display the button that will let them continue, else display the disabled button */}\r\n                            {props.isComplete.viewTwo ?\r\n                                <Button variant=\"registration-form-btn\" type=\"button\" onClick={() => {props.changeView(3)}}>\r\n                                    Continue\r\n                                </Button>\r\n                            :\r\n                                <Button variant=\"registration-form-btn registration-form-btn-disabled\" disabled>\r\n                                    Continue\r\n                                </Button>\r\n                            }\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {/* The ProgressBar component, allows us to pass in props to control the different classes applied */}\r\n                {/* Using a ProgressBar component while passing in the classes as props allows us to reuse the same code while changing the parts that we need to  */}\r\n                <ProgressBar circleOne={\"visited\"} circleTwo={\"current\"} circleThree={\"\"} textOne={\"disabled\"} textTwo={\"active\"} textThree={\"disabled\"}/>\r\n            </div>\r\n        )\r\n    }\r\n}","// Import React\r\nimport React, { useState } from 'react';\r\n\r\n// Import React-Bootstrap\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// Import Custom Components\r\nimport ProgressBar from '../progressBar/ProgressBar';\r\n\r\n// RegViewThree Component\r\nexport default function RegViewThree(props) {\r\n\r\n    // Setting state to track if the checkbox is checked or not, this is used for conditional rendering of the 'Submit' button\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    // Function to update the changeChecked state\r\n    function changeChecked() {\r\n        // if (isChecked !== false) {\r\n        //     setIsChecked(false);\r\n        // } else {\r\n        //     setIsChecked(true);\r\n        // }\r\n        // Using ternary operator to condense if/else statement above\r\n        isChecked ? setIsChecked(false) : setIsChecked(true);\r\n    }\r\n\r\n    // Conditional Rendering Logic, if currentView doesn't equal 3, return null, else return the third view\r\n    if (props.currentView !== 3) {\r\n        return null\r\n    } else {\r\n        return (\r\n            // RegViewThree\r\n            <div>\r\n                {/* Title */}\r\n                <h1 className=\"registration-form-title\">Time to review!</h1>\r\n                {/* Subtitle */}\r\n                <h5 className=\"registration-form-subtitle\">How does everything look?</h5>\r\n\r\n                {/* Container, Rows, and Columns to layout the fields to display the information they provided */}\r\n                <Container className=\"registration-form-container\">\r\n                    {/* Each Row has 2 Columns so each Column's content will take up half of the Row */}\r\n                    <Row>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">First Name</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the first name provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.firstName}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">Last Name</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the last name provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.lastName}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* Each Row has 2 Columns so each Column's content will take up half of the Row */}\r\n                    <Row>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">Email</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the email provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.email}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">NPI Number</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the npi number provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.npiNumber}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* Each Row has 2 Columns so each Column's content will take up half of the Row */}\r\n                    <Row>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">Phone Number</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the phone number provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.phoneNumber}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            {/* Form Group */}\r\n                            <Form.Group className=\"registration-form-group review\">\r\n                                {/* Form Label */}\r\n                                <Form.Label className=\"registration-form-label\">Business Address</Form.Label>\r\n                                {/* Form Text that pulls in the prop from the form state to display the business address provided */}\r\n                                <Form.Text className=\"registration-form-text\">{props.form.address}</Form.Text>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                {/* Div for the checkbox */}\r\n                <div className=\"registration-form-checkbox-div\">\r\n                    {/* Checkbox for terms and conditions, the submit button will not be active until this is checked */}\r\n                    <Form.Check type=\"checkbox\" label=\"I agree to the terms and conditions\" onClick={changeChecked} />\r\n                </div>\r\n                {/* Div for the 'Continue' button */}\r\n                <div className=\"registration-form-btn-div\">\r\n                <Container className=\"registration-form-btn-container\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Button variant=\"registration-form-btn-alt\" type=\"button\" onClick={() => {props.changeView(2)}}>\r\n                                    Back\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                            {/* Conditional Rendering Logic, if the isComplete state prop is true, display the button that will let them submit, else display the disabled button */}\r\n                            {isChecked ? \r\n                                <Button variant=\"registration-form-btn\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            :\r\n                                <Button variant=\"registration-form-btn registration-form-btn-disabled\" type=\"submit\" disabled>\r\n                                    Submit\r\n                                </Button>\r\n                            }\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {/* The ProgressBar component, allows us to pass in props to control the different classes applied */}\r\n                {/* Using a ProgressBar component while passing in the classes as props allows us to reuse the same code while changing the parts that we need to  */}\r\n                <ProgressBar circleOne={\"visited\"} circleTwo={\"visited\"} circleThree={\"current\"} textOne={\"disabled\"} textTwo={\"disabled\"} textThree={\"active\"}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","// Import React\r\nimport React, { useState } from 'react';\r\n\r\n// Import React-Bootstrap\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n// Import Custom Components\r\nimport RegViewOne from './views/RegViewOne';\r\nimport RegViewTwo from './views/RegViewTwo';\r\nimport RegViewThree from './views/RegViewThree';\r\n\r\n// RegistrationForm Component\r\nexport default function RegistrationForm() {\r\n\r\n    // Setting initial state\r\n    const [form, setForm] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        address: \"\",\r\n        phoneNumber: \"\",\r\n        npiNumber: \"\"\r\n    });\r\n\r\n    // Setting state to track if the fields on each view are completely filled\r\n    const [isComplete, setIsComplete] = useState({\r\n        viewOne: false,\r\n        viewTwo: false\r\n    });\r\n\r\n    // Function to check if there is content for each field for the view provided in the parameters\r\n    function contentChecker(itemOne, itemTwo, itemThree, view) {\r\n\r\n        // If each of the fields on this view are not empty, change the state for this view to true, which controls conditional rendering of the continue button\r\n        // Else change the state for this view to false to disable the continue button\r\n        if (itemOne.length && itemTwo.length && itemThree.length > 0) {\r\n            setIsComplete((prevValue) => {\r\n                return {\r\n                    ...prevValue,\r\n                    [view]: true\r\n                }\r\n            });\r\n        } else {\r\n            setIsComplete((prevValue) => {\r\n                return {\r\n                    ...prevValue,\r\n                    [view]: false\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Function to handle changes and update local state values\r\n    function handleChange(event) {\r\n\r\n        // Destructure the name and value of the event.target\r\n        const {name, value} = event.target;\r\n        // Calling setForm to update the local state value for form.[key]\r\n        setForm((prevValue) => {\r\n            return {\r\n                // Returns previous values\r\n                ...prevValue,\r\n                // [name] is the key being entered(firstName, lastName, email, etc.), the value is what is being entered\r\n                [name]: value\r\n            }\r\n        });\r\n\r\n        // Call the function contentChecker which checks to make sure the content fields are not empty\r\n        // We can use this function for as many different views as we have as the parameters are dynamic\r\n        contentChecker(form.firstName, form.lastName, form.email, \"viewOne\");\r\n        contentChecker(form.address, form.phoneNumber, form.npiNumber, \"viewTwo\");\r\n    }\r\n\r\n    // Setting state to track the currentView\r\n    const [currentView, setCurrentView] = useState(1);\r\n\r\n    // Function to update the currentView\r\n    function changeView(viewSelected) {\r\n        \r\n        // Takes in the new view value and updates the state for currentView which determines rendering\r\n        setCurrentView(viewSelected);\r\n    }\r\n\r\n    return (\r\n        // Main Reg Form\r\n        <div className=\"registration-form-div\">\r\n            <Form className=\"registration-form\">\r\n                <h2 id=\"brand\">Availity</h2>\r\n                {/* Load all three views that will be used in the registration form and only render the current view */}\r\n                {/* This allows a fluid user experience that is not broken by having to reload the page */}\r\n                {/* Pass in the props that will be used in the individual view components */}\r\n\r\n                {/* This includes various's states and functions that will update those states */}\r\n                {/* form(state): provides the information currently obtained */}\r\n                {/* handleChange(function): will update the form(state) when content is entered in the fields, this is also used to ensure that the fields are not empty */}\r\n                {/* currentView(state): used to keep track of the current view the user is on, 3 total */}\r\n                {/* changeView(function): will update the state currentView(state) when the user clicks the 'Continue' or 'Back' buttons*/}\r\n                {/* isComplete(state): used for conditional rendering of the 'Continue' button depending on if the fields on that view are not empty*/}\r\n                <RegViewOne form={form} handleChange={handleChange} currentView={currentView} changeView={changeView} isComplete={isComplete} />\r\n                <RegViewTwo form={form} handleChange={handleChange} currentView={currentView} changeView={changeView} isComplete={isComplete} />\r\n                <RegViewThree form={form} handleChange={handleChange} currentView={currentView} changeView={changeView} />\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Import React Router\r\nimport { Route, BrowserRouter as Router, Switch} from 'react-router-dom';\r\n\r\n// Import Custom Components\r\nimport RegistrationForm from './forms/registration/RegistrationForm';\r\n\r\nexport default function App() {\r\n\r\n    return (\r\n        <Router>\r\n\r\n            <Switch>\r\n                <Route path=\"/\" component={RegistrationForm} />\r\n            </Switch>\r\n\r\n        </Router>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Import Custom Components\r\nimport App from '../src/components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}